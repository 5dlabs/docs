# Production values for rust-docs-mcp-server
# This file contains recommended production settings

replicaCount: 3

image:
  repository: ghcr.io/5dlabs/rust-docs-mcp-server
  pullPolicy: IfNotPresent
  tag: "2.0.0"

# Production security settings
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Production resource limits
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 200m
    memory: 512Mi

# Health checks with production timeouts
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Enable autoscaling for production
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Production ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://claude.ai"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: rust-docs-mcp.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: rust-docs-mcp-tls
      hosts:
        - rust-docs-mcp.example.com

# Application configuration
app:
  env:
    RUST_LOG: "rustdocs_mcp_server_http=info,rmcp=warn"
    HOST: "0.0.0.0"
    PORT: "3000"
    EMBEDDING_PROVIDER: "openai"
    EMBEDDING_MODEL: "text-embedding-3-large"
    LLM_MODEL: "gpt-4o-mini-2024-07-18"

  # Use existing secret for production
  existingSecret: "rust-docs-mcp-secrets"

  args:
    - "--all"
    - "--port"
    - "3000"

# Production PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "change-me-in-production"
    username: "rustdocs"
    password: "change-me-in-production"
    database: "rust_docs_vectors"

  primary:
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "fast-ssd"

    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 4Gi
        cpu: 2000m

    # Production database configuration
    configuration: |
      shared_preload_libraries = 'pg_stat_statements,vector'
      max_connections = 200
      shared_buffers = 1GB
      effective_cache_size = 3GB
      maintenance_work_mem = 256MB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 100
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 4MB
      min_wal_size = 1GB
      max_wal_size = 4GB
      max_worker_processes = 8
      max_parallel_workers_per_gather = 4
      max_parallel_workers = 8
      max_parallel_maintenance_workers = 4

    # Enable metrics for monitoring
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  # Enable backup
  backup:
    enabled: true
    cronjob:
      schedule: "0 2 * * *"
      storage:
        size: 100Gi

# Production node selection and affinity
nodeSelector:
  kubernetes.io/arch: amd64
  node-type: compute

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - rust-docs-mcp-server
        topologyKey: kubernetes.io/hostname

tolerations:
- key: "compute-only"
  operator: "Equal"
  value: "true"
  effect: "NoSchedule"

# Service account with minimal permissions
serviceAccount:
  create: true
  automount: false
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/rust-docs-mcp-server"